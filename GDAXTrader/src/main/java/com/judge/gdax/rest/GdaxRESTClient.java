package com.judge.gdax.rest;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import javax.management.RuntimeErrorException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.judge.gdax.GdaxProperties;

public class GdaxRESTClient extends RESTClient
{
	private static Logger logger = LogManager.getLogger(GdaxRESTClient.class.getName());
	public static final String API_ENDPOINT = "https://api.gdax.com";

	/**
	 * The CB-ACCESS-SIGN header is generated by creating a sha256 HMAC using the
	 * base64-decoded secret key on the prehash string for: timestamp + method +
	 * requestPath + body (where + represents string concatenation) and
	 * base64-encode the output. The timestamp value is the same as the
	 * CB-ACCESS-TIMESTAMP header.
	 * 
	 * @param requestPath
	 * @param method
	 * @param body
	 * @param timestamp
	 * @return
	 */
	public String generateSignature(String requestPath, String method, String body, String timestamp)
	{
		try
		{
			String prehash = timestamp + method.toUpperCase() + requestPath + body;
			byte[] secretDecoded = Base64.getDecoder().decode(GdaxProperties.SECRET_KEY);
			SecretKeySpec keyspec = new SecretKeySpec(secretDecoded, "HmacSHA256");
			Mac sha256 = (Mac) Mac.getInstance("HmacSHA256").clone();
			sha256.init(keyspec);
			return Base64.getEncoder().encodeToString(sha256.doFinal(prehash.getBytes()));
		} catch (CloneNotSupportedException | NoSuchAlgorithmException | InvalidKeyException e)
		{
			logger.error("Cannot set up header signature: ", e);
			System.exit(-1);
			throw new RuntimeErrorException(new Error("Cannot set up authentication headers."));
		}
	}

}
